name: Windows Lua Unit Testing

on: [ push, pull_request ]

jobs:
  lua-unit-testing-on-windows-latest:
    name: "LuaUnit on Windows-latest (MSVC)"
    runs-on: windows-latest
  
    steps:
      - uses: actions/checkout@v3.1.0
    
      - name: Build LuaJIT-2.0.4
        shell: cmd
        run: |
          :: Build LuaJIT 2.0.4
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x86 10.0.22000.0 -vcvars_ver=14
          cd ${{ github.workspace }}\.building\LuaJIT-2.0.4\src
          msvcbuild
          dir "luajit.exe" /s
    
      - name: Install LuaJIT-2.0.4
        shell: pwsh
        run: |
          # Install binaries
          Copy-Item "${{ github.workspace }}\.building\LuaJIT-2.0.4\src\luajit.exe" -Destination "${{ github.workspace }}\LuaJIT-2.0.4\bin"
          Copy-Item "${{ github.workspace }}\.building\LuaJIT-2.0.4\src\lua51.dll" -Destination "${{ github.workspace }}\LuaJIT-2.0.4\bin"
          Copy-Item "${{ github.workspace }}\.building\LuaJIT-2.0.4\src\lua51.lib" -Destination "${{ github.workspace }}\LuaJIT-2.0.4\bin"
        
          # 'Install' JIT modules
          Copy-Item "${{ github.workspace }}\.building\LuaJIT-2.0.4\src\jit\*" -Destination "${{ github.workspace }}\LuaJIT-2.0.4\lua\jit\" -Recurse
        
          # 'Install' JIT includes
          Copy-Item "${{ github.workspace }}\.building\LuaJIT-2.0.4\src\luaconf.h" -Destination "${{ github.workspace }}\LuaJIT-2.0.4\include"
          Copy-Item "${{ github.workspace }}\.building\LuaJIT-2.0.4\src\lua.h" -Destination "${{ github.workspace }}\LuaJIT-2.0.4\include"
          Copy-Item "${{ github.workspace }}\.building\LuaJIT-2.0.4\src\lualib.h" -Destination "${{ github.workspace }}\LuaJIT-2.0.4\include"
          Copy-Item "${{ github.workspace }}\.building\LuaJIT-2.0.4\src\lauxlib.h" -Destination "${{ github.workspace }}\LuaJIT-2.0.4\include"
          Copy-Item "${{ github.workspace }}\.building\LuaJIT-2.0.4\src\lua.hpp" -Destination "${{ github.workspace }}\LuaJIT-2.0.4\include"
        
          # Test luajit.exe
          Start-Process -FilePath "${{ github.workspace }}\LuaJIT-2.0.4\bin\luajit.exe" -ArgumentList "-v" -Wait -NoNewWindow
          Start-Process -FilePath "${{ github.workspace }}\LuaJIT-2.0.4\bin\luajit.exe" -ArgumentList "-e `"print(_VERSION)`"" -Wait -NoNewWindow
      
      - name: Install and init luarocks
        shell: cmd
        run: |
          cd ${{ github.workspace}}\mods\noita-mp\
          set INIT_PATH=%CD%
          REM // resolve absolute path
          set REL_PATH=..\..\.building\luarocks-3.9.1-windows-32
          set ABS_PATH=
          rem // Save current directory and change to target directory
          pushd %REL_PATH%
          rem // Save value of CD variable (current directory)
          set ABS_PATH=%CD%
          rem // Restore original directory
          popd
          echo Relative path: %REL_PATH%
          echo Maps to path: %ABS_PATH%
        
          REM // init luarocks
          %ABS_PATH%\luarocks --lua-dir="${{ github.workspace}}\LuaJIT-2.0.4" --lua-version="5.1" init noita-mp --output="${{ github.workspace}}\mods\noita-mp" --homepage="https://github.com/Ismoh/NoitaMP" --lua-versions="5.1" --license="GNU GPL v3"
        
          REM // change luarocks projects config
          %ABS_PATH%\luarocks config --scope="project" lua_interpreter luajit.exe
          %ABS_PATH%\luarocks config --scope="project" lua_dir ${{ github.workspace}}\LuaJIT-2.0.4
          %ABS_PATH%\luarocks config --scope="project" variables.LUA_BINDIR ${{ github.workspace}}\LuaJIT-2.0.4\bin
          %ABS_PATH%\luarocks config --scope="project" variables.LUA_DIR ${{ github.workspace}}\LuaJIT-2.0.4
          %ABS_PATH%\luarocks config --scope="project" variables.LUA_INCDIR ${{ github.workspace}}\LuaJIT-2.0.4\include
          %ABS_PATH%\luarocks config --scope="project" variables.CFLAGS "GODDAMNIT"
          %ABS_PATH%\luarocks config
  
          dir "lua.bat" /s
          dir "luarocks.bat" /s
      
      - name: Fix LuaRocks bug
        run: |
          cd ${{ github.workspace}}\mods\noita-mp\.luarocks
          sed -i 's/GODDAMNIT/\-v \-O2/g' config-5.1.lua
          cat config-5.1.lua
      
      - name: Run LuaUnit 3.4
        shell: pwsh
        id: lua_unit_tests
        run: |
          ls -R
          cd ${{ github.workspace}}\mods\noita-mp\
          Start-Process -FilePath "cd ${{ github.workspace}}\mods\noita-mp\luarocks.bat" -ArgumentList "test > result.log" -Wait -NoNewWindow
        
          # https://timheuer.com/blog/manually-force-a-failure-in-github-action-step/
          # $testFail = Select-String -Path ${{ github.workspace }}\mods\noita-mp\result.log -Pattern 'FAIL' -CaseSensitive
          # echo "{fail}={$testFail}" >> $GITHUB_OUTPUT
        
          # $testError = Select-String -Path ${{ github.workspace }}\mods\noita-mp\result.log -Pattern 'ERROR' -CaseSensitive
          # echo "{error}={$testError}" >> $GITHUB_OUTPUT
        
          # $notFound = Get-Content -Path ${{ github.workspace }}\mods\noita-mp\result.log
          # echo "{not_found}={$notFound}" >> $GITHUB_OUTPUT
      
      - name: Install dependencies
        shell: pwsh
        run: |
          cd ${{ github.workspace}}\mods\noita-mp\
          Start-Process -FilePath "luarocks" -ArgumentList "config" -Wait -NoNewWindow
          Start-Process -FilePath "luarocks" -ArgumentList "install luacov" -Wait -NoNewWindow
          Start-Process -FilePath "luarocks" -ArgumentList "install luacov-coveralls" -Wait -NoNewWindow
          Start-Process -FilePath "luarocks" -ArgumentList "path --append" -Wait -NoNewWindow
          ls -R
      
      - name: Generate coverage report with luacov
        shell: pwsh
        run: |
          dir -Path ${{ github.workspace }}\mods\noita-mp\tests -Filter *.lua -Recurse | %{& '${{ github.workspace }}\mods\noita-mp\lua.bat' -lluacov $_.FullName -o text --verbose }
          Start-Process -FilePath "${{ github.workspace }}\mods\noita-mp\lua_modules\bin\luacov.bat" -Wait -NoNewWindow
          ls -R
      
      - name: Generate coverage report with luacov-coveralls
        shell: pwsh
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_DEBUG: true
        run: |
          cd ${{ github.workspace}}\mods\noita-mp\
          Start-Process -FilePath "luarocks" -ArgumentList "path --append" -Wait -NoNewWindow
          Start-Process -FilePath "${{ github.workspace }}\mods\noita-mp\lua_modules\bin\luacov-coveralls.bat" -ArgumentList "--root ${{ github.workspace}}\mods\noita-mp\ --verbose" -Wait -NoNewWindow
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ${{ github.workspace }}\mods\noita-mp\
          file: ${{ github.workspace }}\mods\noita-mp\luacov.report.out
          flags: unittesting
          functionalities: network
          name: Windows Lua Unit Testing
          verbose: true
