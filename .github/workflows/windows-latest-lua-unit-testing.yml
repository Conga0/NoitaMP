name: Windows Lua Unit Testing

on: [ push, pull_request ]

jobs:
  lua-unit-testing-on-windows-latest:
    name: "LuaUnit on Windows-latest (mingw32)"
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v3.1.0
      - uses: msys2/setup-msys2@v2
        with:
          msystem: mingw32
          install: mingw-w64-i686-gcc
          location: ${{ github.workspace }}\ # NoitaMP\msys64\mingw32
          update: true
  
      #- name: Dump GitHub context
      #  env:
      #    GITHUB_CONTEXT: ${{ toJSON(github) }}
      #  run: echo "$GITHUB_CONTEXT"
      
      - name: Build and install LuaJIT-2.0.4
        shell: cmd
        run: |
          where.exe i686-w64-mingw32-gcc
          where.exe mingw32-gcc
          ls -R ${{ github.workspace }}
          
          :: Build LuaJIT 2.0.4
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x86 10.0.22000.0 -vcvars_ver=14
          cd ${{ github.workspace }}\.building\LuaJIT-2.0.4\src
          msvcbuild
  
          :: Install binaries
          Copy-Item "${{ github.workspace }}\.building\LuaJIT-2.0.4\src\luajit.exe" -Destination "${{ github.workspace }}\LuaJIT-2.0.4\bin"
          Copy-Item "${{ github.workspace }}\.building\LuaJIT-2.0.4\src\lua51.dll" -Destination "${{ github.workspace }}\LuaJIT-2.0.4\bin"
  
          :: 'Install' JIT modules
          Copy-Item "${{ github.workspace }}\.building\LuaJIT-2.0.4\src\jit\" -Destination "${{ github.workspace }}\LuaJIT-2.0.4\lua\jit\"
  
          :: 'Install' JIT includes
          Copy-Item "${{ github.workspace }}\.building\LuaJIT-2.0.4\src\luaconf.h" -Destination "${{ github.workspace }}\LuaJIT-2.0.4\include"
          Copy-Item "${{ github.workspace }}\.building\LuaJIT-2.0.4\src\lua.h" -Destination "${{ github.workspace }}\LuaJIT-2.0.4\include"
          Copy-Item "${{ github.workspace }}\.building\LuaJIT-2.0.4\src\lualib.h" -Destination "${{ github.workspace }}\LuaJIT-2.0.4\include"
          Copy-Item "${{ github.workspace }}\.building\LuaJIT-2.0.4\src\lauxlib.h" -Destination "${{ github.workspace }}\LuaJIT-2.0.4\include"
          Copy-Item "${{ github.workspace }}\.building\LuaJIT-2.0.4\src\lua.hpp" -Destination "${{ github.workspace }}\LuaJIT-2.0.4\include"
  
          call "${{ github.workspace }}\LuaJIT-2.0.4\bin\luajit.exe" -v
          call "${{ github.workspace }}\LuaJIT-2.0.4\bin\luajit.exe" -e 'print(_VERSION)'
      
      - name: Install and init luarocks
        shell: cmd
        run: |
          cd ${{ github.workspace}}\mods\noita-mp\
          set INIT_PATH=%CD%
          
          REM // resolve absolute path
          set REL_PATH=..\..\.building\luarocks-3.9.1-windows-32
          set ABS_PATH=
          rem // Save current directory and change to target directory
          pushd %REL_PATH%
          rem // Save value of CD variable (current directory)
          set ABS_PATH=%CD%
          rem // Restore original directory
          popd
          echo Relative path: %REL_PATH%
          echo Maps to path: %ABS_PATH%
          
          REM // init luarocks
          %ABS_PATH%\luarocks --lua-dir="%INIT_PATH%\..\..\LuaJIT-2.0.4" --lua-version="5.1" init noita-mp --output="%INIT_PATH%" --homepage="https://github.com/Ismoh/NoitaMP" --lua-versions="5.1" --license="GNU GPL v3"
  
          REM // change luarocks config
          %ABS_PATH%\luarocks config --scope="project" lua_interpreter luajit.exe
          %ABS_PATH%\luarocks config --scope="project" lua_dir %INIT_PATH%\..\..\LuaJIT-2.0.4
          %ABS_PATH%\luarocks config --scope="project" variables.LUA_BINDIR %INIT_PATH%\..\..\LuaJIT-2.0.4\bin
          %ABS_PATH%\luarocks config --scope="project" variables.LUA_DIR %INIT_PATH%\..\..\LuaJIT-2.0.4
          %ABS_PATH%\luarocks config --scope="project" variables.LUA_INCDIR %INIT_PATH%\..\..\LuaJIT-2.0.4\include
          %ABS_PATH%\luarocks config --scope="project" variables.CC ${{ github.workspace}}\msys64\mingw32\bin\gcc.exe
          %ABS_PATH%\luarocks config --scope="project" variables.CFLAGS "GODDAMNIT"
          %ABS_PATH%\luarocks config --scope="project" variables.LD ${{ github.workspace}}\msys64\mingw32\bin\gcc.exe
          %ABS_PATH%\luarocks config --scope="project" variables.MAKE mingw32-make
  
          %ABS_PATH%\luarocks config
      
      - name: Fix LuaRocks bug
        run: |
          cd ${{ github.workspace}}\mods\noita-mp\.luarocks
          sed -i 's/GODDAMNIT/\-v \-O2/g' config-5.1.lua
          cat config-5.1.lua
      
      - name: Run LuaUnit 3.4
        shell: cmd
        id: lua_unit_tests
        run: |
          cd ${{ github.workspace}}\mods\noita-mp\
          luarocks test > result.log
          
          type result.log
        
          # https://timheuer.com/blog/manually-force-a-failure-in-github-action-step/
          $testFail = Select-String -Path ${{ github.workspace }}\mods\noita-mp\result.log -Pattern 'FAIL' -CaseSensitive
          echo "{fail}={$testFail}" >> $GITHUB_OUTPUT
        
          $testError = Select-String -Path ${{ github.workspace }}\mods\noita-mp\result.log -Pattern 'ERROR' -CaseSensitive
          echo "{error}={$testError}" >> $GITHUB_OUTPUT
        
          $notFound = Get-Content -Path ${{ github.workspace }}\mods\noita-mp\result.log
          echo "{not_found}={$notFound}" >> $GITHUB_OUTPUT
      
      - name: Unit test failed?
        if: ${{ steps.lua_unit_tests.outputs.fail != '' || steps.lua_unit_tests.outputs.error != '' || steps.lua_unit_tests.outputs.not_found == '' }}
        run: |
          echo "steps.lua_unit_tests.outputs.fail = ${{ steps.lua_unit_tests.outputs.fail }}"
          echo "steps.lua_unit_tests.outputs.error = ${{ steps.lua_unit_tests.outputs.error }}"
          echo "steps.lua_unit_tests.outputs.not_found = ${{ steps.lua_unit_tests.outputs.not_found }}"
      
      - name: Install dependencies
        shell: cmd
        run: |
          cd ${{ github.workspace}}\mods\noita-mp\
          luarocks install luacov && ^
          luarocks install luacov-coveralls
      
      - name: Generate coverage report with luacov
        run: |
          #dir -Path ${{ github.workspace }}\mods\noita-mp\tests -Filter *.lua -Recurse | %{& '${{ github.workspace }}\mods\noita-mp\lua.bat' -lluacov $_.FullName -o text --verbose }
          #Start-Process -FilePath "${{ github.workspace }}\mods\noita-mp\lua.bat" -Wait -NoNewWindow
          ${{ github.workspace }}\mods\noita-mp\lua.bat -lluacov ${{ github.workspace }}\mods\noita-mp\tests\startUnitTests.lua -o text --verbose
      
      - name: Generate coverage report with luacov-coveralls
        shell: cmd
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_DEBUG: true
        run: |
          ${{ github.workspace }}\mods\noita-mp\lua_modules\bin\luacov-coveralls.bat -v
      
      - name: Fix codecov path issue
        # shell: pwsh
        run: |
          # ls -R
          # $content = Get-Content -Path ${{ github.workspace }}/luacov.report.out
          # $content = $content.Replace("\", "/")
          # $content > ${{ github.workspace }}/luacov.report.out
          # Write-Host $content
          
          $(cat ${{ github.workspace }}/luacov.report.out | sed -e 's_\\_/_g') > ${{ github.workspace }}/luacov.report.out
          cat ${{ github.workspace }}/luacov.report.out
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ${{ github.workspace }}
          flags: unittesting
          functionalities: network
          name: Windows Lua Unit Testing
          verbose: true
